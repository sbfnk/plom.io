#!/usr/bin/env python

##########################################################################
#    This file is part of plom.
#
#    plom is free software: you can redistribute it and/or modify it
#    under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    plom is distributed in the hope that it will be useful, but
#    WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    General Public License for more details.
#
#    You should have received a copy of the GNU General Public
#    License along with plom.  If not, see
#    <http://www.gnu.org/licenses/>.
#########################################################################

import json
import os
import sys
import argparse
import copy
from django.template import Template, Context
from django.conf import settings as django_settings

if not django_settings.configured:
    django_settings.configure()

HEADER = '\033[95m'
OKBLUE = '\033[94m'
OKGREEN = '\033[92m'
WARNING = '\033[93m'
FAIL = '\033[91m'
ENDC = '\033[0m'


def getJSON(path):

    try:
        myjson = json.load(open(path))
    except IOError:
        sys.stderr.write(FAIL + 'FAILURE! ' + ENDC + os.path.abspath(path) + ' could not be found\n')
        sys.exit(1)
    except ValueError:
        sys.stderr.write(FAIL + 'FAILURE! ' + ENDC + os.path.abspath(path) + ' could not be parsed. Go check your JSON!\n')
        sys.exit(1)
    else:
        return myjson


def main():
    parser = argparse.ArgumentParser(description='plom: Create json templates, build your model')

    ##fixed arguments
    parser.add_argument('context_file', nargs='?', help='context (.json)')
    parser.add_argument('process_file',   nargs='?', help='process (.json)')
    parser.add_argument('link_file',    nargs='?', help='link (.json)')

    ##specifying the output
    parser.add_argument('-o', '--output', action="store", default=None, help='Path of the created element')

    ##generating model
    parser.add_argument('-w', '--web',    action="store_true", default=False ,  help='Compile for the webApp')
    parser.add_argument('-s', '--simul',  action="store_true", default=False,   help='Compile only simulation methods')
    parser.add_argument('-i', '--input',  action="store",      default='files', help='Input type (used for the webApp)')

    ##generating templates
    template = parser.add_mutually_exclusive_group()
    template.add_argument('--context', action="store_true", default=False, help='Create a context.json template')
    template.add_argument('--process',   action="store_true", default=False, help='Create a process.json template')
    template.add_argument('--link',    action="store_true", default=False, help='Create a link.json template')

    ##generating design
    design = parser.add_mutually_exclusive_group()
    design.add_argument('--slice',        action="store", default=None, help='Create a slice design with the program specified as argument')
    design.add_argument('--profile',      action="store", default=None, help='Create a profile design with the program specified as argument')
    design.add_argument('--lhs',          action="store", default=None, help='Create an lhs design with the program specified as argument')
    design.add_argument('--replicate',    action="store", default=None, help='Create a replicate design with the program specified as argument')

    #design options
    parser.add_argument('--cluster',    action="store", default=None, help='Type of cluster (PBS or SGE)')
    parser.add_argument('--sto',        action="store_true", default=False, help='take into account demographic stochasticity')
    parser.add_argument('-M',        action="store", default=0, help='Number of iterations')
    parser.add_argument('-J',        action="store", default=0, help='Number of particles')
    parser.add_argument('-H',        action="store", default=0, help='Number of samples')


    mycli = parser.parse_args()
    ##############################################
    ##Generating templates
    ##############################################

    #context
    if mycli.context:
        mycli.input = None

        path_rendered = mycli.output or 'context.json'

        print('Creating the context template: {0}'.format(path_rendered))

        template = """{
 "meta": {"id": "my_context",
          "comment": "my comments "},

 "population": [{"id": "city1__all",
                 "size_t0": 1e6,
                 "comment": "city 1, all age classes"},
                {"id": "city2__all",
                 "size_t0": 1e6,
                 "comment": "city 2, all age classes"}],

 "time_series": [{"id": "all__CDC__inc",
                  "population_id": ["city1__all", "city2__all"],
                  "comment": ""},
                 {"id": "all__google__inc",
                  "population_id": ["city1__all", "city2__all"],
                  "comment": ""},
                 {"id": "city2__CDC__inc",
                  "population_id": ["city2__all"],
                  "comment": ""},
                 {"id": "city1__CDC__prev",
                  "population_id": ["city1__all"],
                  "comment": ""}],

 "frequency": "W",

 "data": [{"id": "data",
           "source": "data/data.csv",
           "comment": "my data"},

          {"id": "prop",
           "source": "data/prop.csv",
           "comment": "proportion of the population under surveillance"},

          {"id": "N",
           "source": "data/N.csv",
           "comment": "population size"},
          {"id": "mu_b",
           "source": "data/mu_b.csv",
           "comment": "birth rates"},
          {"id": "mu_d",
           "source": "data/mu_d.csv",
           "comment": "death rates"}],

 "model": {"space": {"type": ["external"]},
           "age": {}}
 }
"""

        with open(path_rendered, 'w') as f:
            f.write(template)

        print(OKGREEN + "{0} created !".format(path_rendered) + ENDC)

    #process
    if mycli.process:
        mycli.input = None

        path_rendered = mycli.output or 'process.json'

        print('Creating the process template: {0}'.format(path_rendered))

        template = """{
 "meta": {"id": "SIR",
          "comment": "SIR model with birth and death processes, Erlang distributed duration of infection and noise on the transmission term"},

 "state": [{"id": "S", "comment": "Susceptible"},
           {"id": "I", "comment": "Infectious"}],

 "parameter": [{"id": "r0",   "comment": "basic reproduction number"},
               {"id": "v",    "comment": "recovery rate"},
               {"id": "sto",  "comment": "noise intensity"},
               {"id": "mu_b", "comment": "birth rate"},
               {"id": "mu_d", "comment": "death rate"}],

 "model": [{"from": "U", "to": "S",  "rate": "mu_b*N", "comment":"birth"},
           {"from": "S", "to": "I",  "rate": "noise__trans(sto)*r0/N*v*I", "tag":[{"id": "transmission", "by":["I"]}], "comment":"infection with noise on r0"},
           {"from": "I", "to": "DU", "rate": "v", "comment":"recovery"},
           {"from": "I", "to": "I",  "rate": "v", "tag":[{"id": "erlang", "shape":2}], "comment":"erlang waiting time"},
           {"from": "S", "to": "U",  "rate": "mu_d", "comment":"death"},
           {"from": "I", "to": "U",  "rate": "mu_d", "comment":"death"}],

 "pop_size_eq_sum_sv": false
}
"""

        with open(path_rendered, 'w') as f:
            f.write(template)

        print(OKGREEN + "{0} created !".format(path_rendered) + ENDC)


    #link
    if mycli.link:
        from plom.Cmodel import contextualize

        path_rendered = mycli.output or 'link.json'

        print('Creating the link template: {0}\n'.format(path_rendered))

        c = getJSON(mycli.context_file)
        p = getJSON(mycli.process_file)

        parameter = [x['id'] for x in p['parameter']]
        trans_list = copy.deepcopy(filter(lambda x: 'tag' in x and x['tag'][0]['id'] == 'transmission', p['model']))
        erlang_list = filter(lambda x: 'tag' in x and x['tag'][0]['id'] == 'erlang', p['model'])


        if ('model' in c) and ('space' in c['model']) and ('type' in c['model']['space']) and ('external' in c['model']['space']['type']):
            contextualize(parameter, p['model'])

            print('Parameters coming from the context: {0}\n'.format(' ,'.join(set(parameter) - set([x['id'] for x in p['parameter']]))))
            print('Context expansion:')
            expanded_trans_list = filter(lambda x: 'tag' in x  and x['tag'][0]['id'] == 'transmission', p['model'])
            for i, x in enumerate(trans_list):
                print('  - space (external): {0} -> {1}'.format(x['rate'], expanded_trans_list[i]['rate']))
        else:
            expanded_trans_list = []



        ##detail expansions (parameter added, term modified)
        print('\nErlang expansion:')
        for x in erlang_list:
            print('  - {state} -> {expanded_state_list} (shape = {shape})'.format(state = x['from'], shape = x['tag'][0]['shape'], expanded_state_list = ', '.join([x['from']+str(i) for i in range(x['tag'][0]['shape'])])))


        l = """{{% autoescape off %}
 "meta": {"id": "my_id",
          "comment": "my comment"},

 "observed": [{% if ts_prev %}{"id": "prev",
               "comment": "prevalence",
               "definition": ["{{ prev }}"],
               "time_series_id": [{% for x in ts_prev %}"{{ x }}"{% if x != ts_prev|last %}, {% endif %}{% endfor %}]},{% endif %}
              {% if ts_inc %}{"id": "inc",
               "comment": "incidence",
               "definition": [{{ inc }}],
               "time_series_id": [{% for x in ts_inc %}"{{ x }}"{% if x != ts_inc|last %}, {% endif %}{% endfor %}]}{% endif %}],

 "parameter": [{"id": "rep", "comment": "reporting rate"},
               {"id": "phi", "comment": "over-dispertion"}],

 "model": {"distribution": "discretized_normal",
           "mean": "rep*prop*x",
           "var": "rep*(1.0-rep)*prop*x + (rep*phi*prop*x)**2"},

 "value": {% templatetag openbrace %}{% for x in value %}"{{ x.id }}": {"partition_id": "{{ x.partition_id }}", "transformation": "{{ x.transformation }}",
           {{ x.indent }} "min": {{ x.min }}, "guess": {{ x.guess }}, "max": {{ x.max }},
           {{ x.indent }} "sd_transf": "{{ x.sd_transf }}"}{% if x != value|last %},{% else %}{% templatetag closebrace %}{% endif %}
           {% endfor %}
}
{% endautoescape %}
"""

        value = []

        state = [x['id'] for x in p['state']]
        for x in state:
            myvalue = {'id':x,
                       'partition_id': 'variable_population',
                       'transformation': 'logit',
                       'min': 0,
                       'guess':0,
                       'max':0,
                       'sd_transf':0,
                       'indent':' '*(len(x)+4)}

            value.append(myvalue)

        for x in parameter:
            myvalue = {'id':x,
                       'partition_id': 'identical_population',
                       'transformation': 'log',
                       'min': 0, 'guess':0, 'max':0, 'sd_transf':0,
                       'indent':' '*(len(x)+4)}

            value.append(myvalue)


        for x in ['rep', 'phi']:
            myvalue = {'id':x,
                       'partition_id': 'variable_time_series' if x == 'rep' else 'identical_time_series',
                       'transformation': 'logit' if x == 'rep' else 'log',
                       'min': 0, 'guess':0, 'max':0, 'sd_transf':0,
                       'indent':' '*(len(x)+4)}

            value.append(myvalue)


        t = Template(l)
        c = Context({'prev': trans_list[0]['tag'][0]['by'][0],
                     'inc': '{{"from": "{0}", "to": "{1}"}}'.format(trans_list[0]['from'], trans_list[0]['to']),
                     'ts_prev': [x['id'] for x in c['time_series'] if x['id'].split('__')[2] == 'prev'],
                     'ts_inc':  [x['id'] for x in c['time_series'] if x['id'].split('__')[2] == 'inc'],
                     'value': value})


        ##create template
        with open(path_rendered, 'w') as f:
            f.write(t.render(c))

        print(OKGREEN + "{0} created !".format(path_rendered) + ENDC)

        print(WARNING + 'Be sure to specify a "unit" property to your rate ("unit"="D", "W", "M" or "Y").' + ENDC)

        print('Note that you can also treat rate as duration by adding "type": "rate_as_duration".')

        mycli.input = None ##prevent model generation...


    ##############################################
    ##Generating design
    ##############################################
    if any([mycli.slice, mycli.profile, mycli.lhs, mycli.replicate]):

        template = """{% autoescape off %}{
 "meta": {"id": "{{ id }}",
          "comment": "my design"},

 "action": {"id": "{{ action }}",
            "H": {{ H }},
            "seed": 12334216564},

 "cmd": [["D",  "", "{{ exec_C }}", 1]]{% if cluster %},

 "cluster": {"type": {{ cluster.type }},
             "walltime": "01:20:00",
             "cpu": 1,
             "node": 1}{% endif %}
}{% endautoescape %}
"""

        d_opt = [{'exec_C':mycli.slice, 'id': 'slice', 'H':20},
                 {'exec_C':mycli.profile, 'id': 'profile', 'H':20},
                 {'exec_C':mycli.lhs, 'id': 'lhs', 'H':100},
                 {'exec_C':mycli.replicate, 'id': 'replicate', 'H':1}]

        #get the selected design object
        d = filter(lambda x:x['exec_C'], d_opt)[0]

        if d['exec_C'] not in ['mif', 'smc', 'simplex', 'pmcmc', 'kalman', 'kmcmc', 'simul']:
            sys.stderr.write(FAIL + 'FAILURE! ' + ENDC  + d['exec_C'] + ' is not a valid plom program\n')
            sys.exit(1)



        path_rendered = mycli.output or 'design.json'

        opts_C = ''
        if d['exec_C'] != 'simplex':
            opts_C += ' sto' if mycli.sto else ' deter'
        opts_C += ' -M '+mycli.M if mycli.M else ''
        opts_C += ' -J '+mycli.J if mycli.J else ''

        cluster = {}
        if mycli.cluster:
            cluster['type'] = mycli.cluster

        my_id = os.path.splitext(os.path.basename(mycli.output))[0] if mycli.output else d['id']

        t = Template(template)
        c = Context({'id': my_id,
                     'action': d['id'],
                     'exec_C': d['exec_C'] + opts_C,
                     'H': mycli.H or d['H'],
                     'cluster': cluster})

        with open(path_rendered, 'w') as f:
            f.write(t.render(c))

        print(OKGREEN + 'Design generated: ' + ENDC + 'run sfi --bootstrap {0} to bootstrap it.'.format(path_rendered))

        mycli.input = None ##prevent model generation...


    ##############################################
    ##Generating model (input from files or stdin)
    ##############################################
    if mycli.input:
        from plom.Model import Model

        if mycli.input == 'files':

            if not (mycli.context_file and mycli.process_file and mycli.link_file):
                sys.stderr.write(FAIL + 'FAILURE! ' + ENDC + 'To create a model plom needs 3 JSON files (plom context.json process.json link.json otherwise see plom --help\n')
                sys.exit(1)

            c = getJSON(mycli.context_file)
            p = getJSON(mycli.process_file)
            l = getJSON(mycli.link_file)

            ##sanitize path data in context: if not absolute path relative path from context file
            for x in c['data']:
                if not os.path.isabs(x['source']):
                    x['source'] = os.path.join(os.path.dirname(os.path.abspath(mycli.context_file)), x['source'])


        elif mycli.input == 'stdin': #get **one** JSON object containing context model and link objects (used by node.js)
            cpl = raw_input()
            cpl = json.loads(cpl)

            c = cpl['context']
            p = cpl['process']
            l = cpl['link']


        path_rendered = os.path.abspath(mycli.output) if mycli.output else os.path.join(os.path.expanduser("~"), 'my_model')

        model = Model(path_rendered, c, p, l)

        print('preparing model...')
        model.prepare()
        print(OKBLUE + "model ready" + ENDC)
        print('coding model...')
        model.code()
        print(OKBLUE + "model coded" + ENDC)

        if not model.data:
            print(WARNING + "WARNING: " + ENDC + "No data: only simulation methods will be compiled")
            mycli.simul = True

        print("compiling")

        model.compile(web=mycli.web, simulation_only=mycli.simul)
        print(OKBLUE + "model compiled" + ENDC)
        print('writting settings...')
        model.write_settings()
        print(OKBLUE + "settings written" + ENDC)

        print(OKGREEN + 'Successfully created!' + ENDC + ' in {0}'.format(path_rendered))

if __name__ == '__main__':
    main()
